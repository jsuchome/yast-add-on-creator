/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	include/add-on-creator/dialogs.ycp
 * Package:	Configuration of add-on-creator
 * Summary:	Dialogs definitions
 * Authors:	Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id$
 */

{

textdomain "add-on-creator";

import "Label";
import "Wizard";
import "AddOnCreator";

include "add-on-creator/helps.ycp";

// add the new readme/license file
string AddFile (string label, list conflicts, list<string> values) {

    string ret		= nil;
    list allowed	= values == nil ? [] :
	filter (string v, values,``(!contains(conflicts, v)));

    UI::OpenDialog( `opt(`decorated), `HBox(
	`HSpacing(1),
	`VBox(
	    values == nil ? `TextEntry (`id (`file), label, "") :
	    `ComboBox (`id (`file), `opt(`editable), label, allowed),
	    `HBox(
		`PushButton(`id(`ok),`opt(`default,`key_F10),Label::OKButton()),
		`PushButton(`id(`cancel),`opt (`key_F9), Label::CancelButton())
	    )
	),
	`HSpacing(1)
    ));
    UI::SetFocus (`id(`file));
    while (true)
    {
	any result = UI::UserInput ();
	if (result == `cancel)
	{
	    ret	= nil;
	    break;
	}
	if (result == `ok)
	{
	    ret	= (string)UI::QueryWidget (`id(`file),`Value);
	    if (contains (conflicts, ret))
	    {
		// popup message
		Popup::Error (_("A file with this name already exists.
Choose a different one."));
		ret	= nil;
		continue;
	    }
	    break;
	}
    }
    UI::CloseDialog ();
    return ret;
}

/**
 * @return dialog result
 */
any ExpertSettingsDialog () {

    map current_product		= AddOnCreator::current_product;

    // dialog caption
    string caption = _("Expert Settings");

    string info				= current_product["info"]:"";
    map<string,string> license_files	= current_product["license_files"]:$[];
    map<string,string> readme_files	= current_product["readme_files"]:$[];

    void replace_readme_widgets (string active) {
		UI::ReplaceWidget (`id(`rpfiles),
		    `ComboBox (`id(`readme_files), `opt (`notify,`hstretch), "",
			maplist (string f, string c, readme_files, ``(
			    `item (`id(f), f, f == active)))
		    )
		);
    }
    void replace_license_widgets (string active) {
		UI::ReplaceWidget (`id(`rplicenses),
		    `ComboBox (`id(`lic_files), `opt (`notify,`hstretch), "",
			maplist (string f, string c, license_files, ``(
			    `item (`id(f), f, f == active)))
		    )
		);
    }

    term contents = `HBox (`HSpacing (), `VBox (
	`VWeight (2,
	    `MultiLineEdit (`id (`info), _("&info.txt File"), info)
	),
	// frame label
	`VWeight (4, `Frame (_("&License Files"), `HBox(`HSpacing (0.4), `VBox (
	    `HBox (
	      `ReplacePoint (`id(`rplicenses),
		`ComboBox (`id(`lic_files), `opt (`notify, `hstretch), "",
		     maplist (string f, string c, license_files, ``(f))
		)
	      ),
	      `PushButton (`id (`add_license), Label::AddButton ()),
	      // button label
	      `PushButton (`id (`import_license), _("I&mport")),
	      `PushButton (`id (`delete_license), Label::DeleteButton ())
	    ),
	    `MultiLineEdit (`id (`license), "")
	), `HSpacing (0.4)))),
	`VSpacing (0.7),
	// frame label
	`VWeight (4, `Frame (_("README Files"), `HBox (`HSpacing (0.4), `VBox (
	    `HBox (
	      `ReplacePoint (`id(`rpfiles),
		`ComboBox (`id(`readme_files), `opt (`notify, `hstretch), "",
		     maplist (string f, string c, readme_files, ``(f))
		)
	      ),
	      `PushButton (`id (`add_readme), Label::AddButton ()),
	      // button label
	      `PushButton (`id (`import_readme), _("Im&port")),
	      `PushButton (`id (`delete_readme), Label::DeleteButton ())
	    ),
	    `MultiLineEdit (`id (`readme), "")
	), `HSpacing (0.4)))),
	`VSpacing (0.7)
    ), `HSpacing ());


    Wizard::SetContentsButtons(caption, contents, HELPS["expert"]:"",
	    Label::BackButton(), Label::NextButton());
    Wizard::HideAbortButton();

    string current_readme = (string)UI::QueryWidget (`id(`readme_files),`Value);
    if (readme_files[current_readme]:"" != "")
	UI::ChangeWidget (`id(`readme),`Value, readme_files[current_readme]:"");
    string current_license = (string)UI::QueryWidget(`id(`lic_files),`Value);
    if (license_files[current_license]:"" != "")
       UI::ChangeWidget(`id(`license),`Value,license_files[current_license]:"");

    UI::ChangeWidget (`id(`delete_readme), `Enabled, readme_files != $[]);
    UI::ChangeWidget (`id(`delete_license), `Enabled, license_files != $[]);

    any ret = nil;
    while(true) {

	ret		= UI::UserInput();
	if (ret == `add_readme) {
	    string new = AddFile (
		// textentry label
		_("&Name of the New README File"),
		maplist (string f, string c, readme_files, ``(f)), nil);
	    if (new != nil)
	    {
		readme_files[new]	= "";
		replace_readme_widgets (new);
		ret = `readme_files;
		UI::SetFocus (`id(`readme));
	    }
	    UI::ChangeWidget (`id(`delete_readme),`Enabled,readme_files != $[]);
	}
	if (ret == `import_readme)
	{
	    string file = UI::AskForExistingFile (
		current_product["rpm_path"]:"", "",
		// popup for file selection dialog
		_("Choose the New README File")
	    );
	    if (file != nil)
	    {
		string imported	= (string) SCR::Read (.target.string, file);
		if (imported != nil)
		{
		    string new = substring (file, findlastof (file, "/") + 1);
		    readme_files[new]	= imported;
		    replace_readme_widgets (new);
		    current_readme      = nil;
		    ret = `readme_files;
		    UI::SetFocus (`id(`readme));
		}
	    }

	}
	string fr	= (string)UI::QueryWidget (`id(`readme_files),`Value);
	if (ret == `delete_readme)
	{
	    readme_files	= remove (readme_files, fr);
	    replace_readme_widgets ("");
	    ret = `readme_files;
	    fr	= (string)UI::QueryWidget (`id(`readme_files),`Value);
	    current_readme	= nil;
	    UI::ChangeWidget (`id(`delete_readme),`Enabled,readme_files != $[]);
	}
	if (ret == `readme_files)
	{
	    if (fr != current_readme)
	    {
		if (current_readme != nil)
		{
		    readme_files[current_readme]	=
			(string)UI::QueryWidget(`id(`readme),`Value);
		}
		current_readme	= fr;
		UI::ChangeWidget (`id(`readme),`Value, readme_files[fr]:"");
	    }
	}
	if (ret == `add_license) {
	    string new = AddFile (
		// textentry label
		_("&Language for the New License File"),
		maplist (string f, string c, license_files, ``(
		    f == "license" ? "" : substring (f, 8))),
		AddOnCreator::GetLangCodes (true));
	    if (new != nil)
	    {
		new	= "license" + (new == "" ? "" : ".") + new;
		license_files[new]	= "";
		replace_license_widgets (new);
		ret = `lic_files;
		UI::SetFocus (`id(`license));
	    }
	    UI::ChangeWidget (`id(`delete_license),`Enabled,license_files!=$[]);
	}
	if (ret == `import_license)
	{
	    string file = UI::AskForExistingFile (
		current_product["rpm_path"]:"", "license*",
		// popup for file selection dialog
		_("Choose the New License File")
	    );
	    if (file != nil)
	    {
		string imported	= (string) SCR::Read (.target.string, file);
		if (imported != nil)
		{
		    string new = substring (file, findlastof (file, "/") + 1);
		    license_files[new]	= imported;
		    replace_license_widgets (new);
		    current_license     = nil;
		    ret			= `lic_files;
		    UI::SetFocus (`id(`license));
		}
	    }

	}
	string fl	= (string)UI::QueryWidget (`id(`lic_files),`Value);
	if (ret == `delete_license)
	{
	    license_files	= remove (license_files, fl);
	    replace_license_widgets ("");
	    ret = `lic_files;
	    fl	= (string)UI::QueryWidget (`id(`lic_files),`Value);
	    current_license	= nil;
	    UI::ChangeWidget (`id(`delete_license),`Enabled,license_files!=$[]);
	}
	if (ret == `lic_files)
	{
	    if (fl != current_license)
	    {
		if (current_license != nil)
		{
		    license_files[current_license]	=
			(string)UI::QueryWidget(`id(`license),`Value);
		}
		current_license	= fl;
		UI::ChangeWidget (`id(`license),`Value, license_files[fl]:"");
	    }
	}
        else if (ret == `next) {
	    readme_files[current_readme]	=
		(string)UI::QueryWidget(`id(`readme),`Value);
	    license_files[current_license]	=
		(string)UI::QueryWidget(`id(`license),`Value);
	    /*
	    AddOnCreator::media =
		(string) UI::QueryWidget (`id(`media),`Value);
	    */
	    AddOnCreator::current_product["info"]		=
		UI::QueryWidget (`id(`info),`Value);
	    AddOnCreator::current_product["readme_files"]	= readme_files;
	    AddOnCreator::current_product["license_files"]	= license_files;
	    break;
	}
	else if (ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if (ret == `back) {
	    Wizard::RestoreAbortButton();
            break;
        }
    }
    return ret;
}

/**
 * editor of COPYING, COPYING.lang, COPYRIGHT, COPYRIGHT.lang
 * @return dialog result
 */
any ExpertSettingsDialog2 () {

    // dialog caption
    string caption = _("Expert Settings, Part 2");

    map current_product		= AddOnCreator::current_product;
    map<string,string> copying_files	= current_product["copying_files"]:$[];
    map<string,string> copyright_files = current_product["copyright_files"]:$[];

    void replace_copyright_widgets (string active) {
	UI::ReplaceWidget (`id(`rpfiles),
	    `ComboBox (`id(`copyright_files), `opt (`notify,`hstretch), "",
		maplist (string f, string c, copyright_files, ``(
		    `item (`id(f), f, f == active)))
		)
	    );
	UI::ChangeWidget (`id(`delete_copyright),`Enabled,copyright_files!=$[]);
    }
    void replace_copying_widgets (string active) {
	UI::ReplaceWidget (`id(`rpcopyings),
	    `ComboBox (`id(`copying_files), `opt (`notify,`hstretch), "",
		maplist (string f, string c, copying_files, ``(
		    `item (`id(f), f, f == active)))
		)
	    );
	UI::ChangeWidget (`id(`delete_copying),`Enabled,copying_files!=$[]);
    }

    term contents = `HBox (`HSpacing (), `VBox (
	// frame label
	`Frame (_("&COPYING Files"), `HBox(`HSpacing (0.4), `VBox (
	    `HBox (
	      `ReplacePoint (`id(`rpcopyings),
		`ComboBox (`id(`copying_files), `opt (`notify, `hstretch), "",
		     maplist (string f, string c, copying_files, ``(f))
		)
	      ),
	      `PushButton (`id (`add_copying), Label::AddButton ()),
	      // button label
	      `PushButton (`id (`import_copying), _("I&mport")),
	      `PushButton (`id (`delete_copying), Label::DeleteButton ())
	    ),
	    `MultiLineEdit (`id (`copying), "")
	), `HSpacing (0.4))),
	`VSpacing (0.7),
	// frame label
	`Frame (_("COPY&RIGHT Files"), `HBox (`HSpacing (0.4), `VBox (
	    `HBox (
	      `ReplacePoint (`id(`rpfiles),
		`ComboBox (`id(`copyright_files), `opt (`notify, `hstretch), "",
		     maplist (string f, string c, copyright_files, ``(f))
		)
	      ),
	      `PushButton (`id (`add_copyright), Label::AddButton ()),
	      // button label
	      `PushButton (`id (`import_copyright), _("Im&port")),
	      `PushButton (`id (`delete_copyright), Label::DeleteButton ())
	    ),
	    `MultiLineEdit (`id (`copyright), "")
	), `HSpacing (0.4))),
	`VSpacing (0.7)
    ), `HSpacing ());


    Wizard::SetContentsButtons(caption, contents, HELPS["expert2"]:"",
	    Label::BackButton(), Label::NextButton());

    string current_copyright =
	(string)UI::QueryWidget (`id(`copyright_files),`Value);
    if (copyright_files[current_copyright]:"" != "")
	UI::ChangeWidget (`id (`copyright), `Value,
	    copyright_files[current_copyright]:"");

    string current_copying =(string)UI::QueryWidget(`id(`copying_files),`Value);
    if (copying_files[current_copying]:"" != "")
       UI::ChangeWidget(`id(`copying),`Value,copying_files[current_copying]:"");

    UI::ChangeWidget (`id(`delete_copyright), `Enabled, copyright_files != $[]);
    UI::ChangeWidget (`id(`delete_copying), `Enabled, copying_files != $[]);

    any ret = nil;
    while(true) {
	ret		= UI::UserInput();
	if (ret == `add_copyright) {
	    string new = AddFile (
		// textentry label
		_("&Language for the New COPYRIGHT File"),
		maplist (string f, string c, copyright_files, ``(
		    f == "COPYRIGHT" ? "" : substring (f, 10))),
		AddOnCreator::GetLangCodes (false));
	    if (new != nil)
	    {
		new	= "COPYRIGHT" + (new == "" ? "" : ".") + new;
		copyright_files[new]	= "";
		replace_copyright_widgets (new);
		ret = `copyright_files;
		UI::SetFocus (`id(`copyright));
	    }
	}
	if (ret == `import_copyright)
	{
	    string file = UI::AskForExistingFile (
		current_product["rpm_path"]:"", "COPYRIGHT*",
		// popup for file selection dialog
		_("Choose the New COPYRIGHT File")
	    );
	    if (file != nil)
	    {
		string imported	= (string) SCR::Read (.target.string, file);
		if (imported != nil)
		{
		    string new = substring (file, findlastof (file, "/") + 1);
		    copyright_files[new]	= imported;
		    replace_copyright_widgets (new);
		    current_copyright	= nil;
		    ret = `copyright_files;
		    UI::SetFocus (`id(`copyright));
		}
	    }
	}
	string cr = (string)UI::QueryWidget (`id(`copyright_files),`Value);
	if (ret == `delete_copyright)
	{
	    copyright_files	= remove (copyright_files, cr);
	    replace_copyright_widgets ("");
	    ret = `copyright_files;
	    cr	= (string)UI::QueryWidget (`id(`copyright_files),`Value);
	    current_copyright	= nil;
	}
	if (ret == `copyright_files)
	{
	    if (cr != current_copyright)
	    {
		if (current_copyright != nil)
		{
		    copyright_files[current_copyright]	=
			(string)UI::QueryWidget(`id(`copyright),`Value);
		}
		current_copyright	= cr;
		UI::ChangeWidget(`id(`copyright),`Value,copyright_files[cr]:"");
	    }
	}
	if (ret == `add_copying) {
	    string new = AddFile (
		// textentry label
		_("&Language for the New COPYING File"),
		maplist (string f, string c, copying_files, ``(
		    f == "COPYING" ? "" : substring (f, 8))),
		AddOnCreator::GetLangCodes (false));
	    if (new != nil)
	    {
		new	= "COPYING" + (new == "" ? "" : ".") + new;
		copying_files[new]	= "";
		replace_copying_widgets (new);
		ret = `copying_files;
		UI::SetFocus (`id(`copying));
	    }
	}
	if (ret == `import_copying)
	{
	    string file = UI::AskForExistingFile (
		current_product["rpm_path"]:"", "copying*",
		// popup for file selection dialog
		_("Choose the New COPYING File")
	    );
	    if (file != nil)
	    {
		string imported	= (string) SCR::Read (.target.string, file);
		if (imported != nil)
		{
		    string new = substring (file, findlastof (file, "/") + 1);
		    copying_files[new]	= imported;
		    replace_copying_widgets (new);
		    current_copying     = nil;
		    ret = `copying_files;
		    UI::SetFocus (`id(`copying));
		}
	    }
	}
	string co	= (string)UI::QueryWidget (`id(`copying_files),`Value);
	if (ret == `delete_copying)
	{
	    copying_files	= remove (copying_files, co);
	    replace_copying_widgets ("");
	    ret = `copying_files;
	    co	= (string)UI::QueryWidget (`id(`copying_files),`Value);
	    current_copying	= nil;
	}
	if (ret == `copying_files)
	{
	    if (co != current_copying)
	    {
		if (current_copying != nil)
		{
		    copying_files[current_copying]	=
			(string)UI::QueryWidget(`id(`copying),`Value);
		}
		current_copying	= co;
		UI::ChangeWidget (`id(`copying),`Value, copying_files[co]:"");
	    }
	}
        else if (ret == `next) {
	    copyright_files[current_copyright]	=
		(string)UI::QueryWidget(`id(`copyright),`Value);
	    copying_files[current_copying]	=
		(string)UI::QueryWidget(`id(`copying),`Value);
	    AddOnCreator::current_product["copyright_files"] = copyright_files;
	    AddOnCreator::current_product["copying_files"] = copying_files;
	    Wizard::RestoreAbortButton();
	    break;
	}
	else if (ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if (ret == `back) {
            break;
        }
    }
    return ret;
}

/**
 * editor of patches, products, media files FIXME
 * @return dialog result
 */
any ExpertSettingsDialog3 () {


    // dialog caption
    string caption = _("Expert Settings, Part 3");

    map current_product		= AddOnCreator::current_product;
    list<string> products_files	= current_product["products_files"]:[];
    list<string> patches_files	= current_product["patches_files"]:[];
    list<string> media_files	= current_product["media_files"]:[];

    string products	= products_files[0]:"";
    string patches	= patches_files[0]:"";
    string media	= media_files[0]:"";

    term contents = `HBox (`HSpacing (), `VBox (
	`MultiLineEdit (`id (`products), _("products"), products),
	`Right (
	      // button label
	      `PushButton (`id (`import_products), _("I&mport"))
	),
	`VSpacing (0.7),
	`MultiLineEdit (`id (`patches), _("patches"), patches),
	`Right (
	      // button label
	      `PushButton (`id (`import_patches), _("&Import"))
	),
	`VSpacing (0.7),
	`MultiLineEdit (`id (`media), _("media"), media),
	`Right (
	      // button label
	      `PushButton (`id (`import_media), _("Im&port"))
	),
	`VSpacing (0.7)
    ), `HSpacing ());


    Wizard::SetContentsButtons(caption, contents, HELPS["expert3"]:"",
	    Label::BackButton(), Label::NextButton());


    any ret = nil;
    while(true) {
	ret		= UI::UserInput();
        if (ret == `next) {
	    Wizard::RestoreAbortButton();
	    break;
	}
	else if (ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if (ret == `back) {
            break;
        }
    }
    return ret;
}

/**
 * Dialog for configuration of an installation workflow
 */
any WorkflowConfigurationDialog () {


    // dialog caption
    string caption = _("Workflow Configuration");
    map current_product		= AddOnCreator::current_product;
    string workflow_path	= current_product["workflow_path"]:"";
    string y2update_path	= current_product["y2update_path"]:"";
    list<string> y2update_packages = current_product["y2update_packages"]:[];
    // helper for updating table contents
    void update_table () {
	UI::ChangeWidget (`id(`y2update_packages), `Items,
	    maplist (string p, y2update_packages, ``(`item (`id(p), p))));
    }

    term contents = `HBox (`HSpacing (), `VBox (
	`HBox (
	    `TextEntry (`id (`workflow_path),
		// textentry label
		_("&Location of the File with the Workflow Description"),workflow_path),
	    `VBox (
		`Label (""),
		`PushButton (`id(`browse), Label::BrowseButton ())
	    )
	),
	`VSpacing (),
	`RadioButtonGroup (`id(`rbg), `VBox (
	    `Left (`RadioButton (`id (`no_additional), `opt (`notify),
	        // radiobutton label
	        _("&No Additional YaST Modules"),
	        y2update_path == "" && y2update_packages ==[]
	    )),
	    `Left (`RadioButton (`id(`y2update_rb), `opt (`notify),
	        // radiobutton label
	        _("&Path to y2update.tgz"),
	        y2update_path != ""
	    )),
	    `HBox (
	        `HSpacing (2),
	        `TextEntry (`id (`y2update_path), "", y2update_path),
	        // pushbutton label
	        `PushButton (`id(`br_y2update), _("&Browse"))
	    ),
	    `Left (`RadioButton (`id(`import), `opt (`notify),
	        // radiobutton label
	        _("&Import the Packages"),
	        y2update_packages != [] && y2update_path == ""
	    )),
	    `HBox (`HSpacing (2), `VBox (
	        `Table (`id(`y2update_packages),
		   // table header
		   `header (_("YaST Module Package")), []
	        ),
	        `HBox (
		   `PushButton (`id(`add), Label::AddButton ()),
		   `PushButton (`id(`delete), Label::DeleteButton ()),
		   `HStretch ()
	        )
	    ))
	)),
	`VSpacing (0.7)
    ), `HSpacing ());


    Wizard::SetContentsButtons(caption, contents, HELPS["workflow"]:"",
	    Label::BackButton(), Label::NextButton());
    Wizard::HideAbortButton();

    update_table ();
    foreach (symbol w_id, [ `y2update_path, `br_y2update ], {
	UI::ChangeWidget (`id(w_id), `Enabled,
	    UI::QueryWidget (`id (`rbg), `Value) == `y2update_rb);
    });
    foreach (symbol w_id, [ `y2update_packages, `add, `delete ], {
	UI::ChangeWidget (`id(w_id), `Enabled,
	    UI::QueryWidget (`id (`rbg), `Value) == `import);
    });
    UI::ChangeWidget (`id(`delete), `Enabled, y2update_packages != []);

    any ret = nil;
    while(true) {
	ret		= UI::UserInput();
	if (ret == `browse)
	{
	    string file = UI::AskForExistingFile (
		current_product["rpm_path"]:"", "*.xml",
		// popup for file selection dialog
		_("Choose the installation.xml File")
	    );
	    if (file != nil) //TODO check for xml format
	    {
		workflow_path	= file;
		UI::ChangeWidget (`id(`workflow_path), `Value, file);
	    }
	}
	else if (ret == `import || ret == `y2update_rb || ret == `no_additional)
	{
	    foreach (symbol w_id, [ `y2update_packages, `add, `delete ], {
		UI::ChangeWidget (`id(w_id), `Enabled, ret == `import);
	    });
	    foreach (symbol w_id, [ `y2update_path, `br_y2update ], {
		UI::ChangeWidget (`id(w_id), `Enabled, ret == `y2update_rb);
	    });
	}
	if (ret == `br_y2update)
	{
	    string file = UI::AskForExistingFile (
		current_product["rpm_path"]:"", "y2update.tgz",
		// popup for file selection dialog
		_("Choose the Path to the y2update.tgz File")
	    );
	    if (file != nil) //TODO check for tgz format
	    {
		y2update_path	= file;
		UI::ChangeWidget (`id(`y2update_path), `Value, file);
	    }
	}
	else if (ret == `add)
	{
	    string file = UI::AskForExistingFile (
		current_product["rpm_path"]:"", "*.rpm",
		// popup for file selection dialog
		_("Choose the YaST Module Package")
	    );
	    if (file != nil && !contains (y2update_packages, file))
	    //TODO check for rpm
	    {
		y2update_packages	= add (y2update_packages, file);
		update_table ();
	    }
	    UI::ChangeWidget (`id(`delete), `Enabled, y2update_packages != []);
	}
	else if (ret == `delete)
	{
	    string sel = (string)
		UI::QueryWidget (`id(`y2update_packages),`CurrentItem);
	    y2update_packages = filter (string p, y2update_packages,``(p!=sel));
	    update_table ();
	    UI::ChangeWidget (`id(`delete), `Enabled, y2update_packages != []);
	}
        else if (ret == `next) {
	    AddOnCreator::current_product["y2update_packages"]	=
		y2update_packages;
	    AddOnCreator::current_product["y2update_path"]	=
		(string)UI::QueryWidget (`id(`y2update_path), `Value);
	    AddOnCreator::current_product["workflow_path"]	=
		(string)UI::QueryWidget (`id(`workflow_path), `Value);
	    break;
	}
	else if (ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if (ret == `back) {
            break;
        }
    }
    Wizard::RestoreAbortButton();
    return ret;
}
/* EOF */
}
